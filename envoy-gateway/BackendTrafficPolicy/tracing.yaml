# export GATEWAY_HOST=$(kubectl get gateway/eg -o jsonpath='{.status.addresses[0].value}')
#
# curl $GATEWAY_HOST/get
# curl -H "x-some-id: fake-val" $GATEWAY_HOST/get
#
apiVersion: gateway.networking.k8s.io/v1
kind: GatewayClass
metadata:
  name: eg
spec:
  controllerName: gateway.envoyproxy.io/gatewayclass-controller
---
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: eg
spec:
  gatewayClassName: eg
  listeners:
    - name: http
      protocol: HTTP
      port: 80
  infrastructure:
    parametersRef:
      group: gateway.envoyproxy.io
      kind: EnvoyProxy
      name: zipkin-tracing
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: EnvoyProxy
metadata:
  name: zipkin-tracing
spec:
  telemetry:
    tracing:
      samplingRate: 1
      provider:
        type: Zipkin
        backendRefs:
          - name: otel-collector
            namespace: monitoring
            port: 9411
        zipkin:
          enable128BitTraceId: true
      customTags:
        "provider":
          type: Literal
          literal:
            value: "zipkin"
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: backend
spec:
  hostnames:
  parentRefs:
    - name: eg
  rules:
    - matches:
        - path:
            type: PathPrefix
            value: /
      backendRefs:
        - name: infra-backend-v1
          port: 8080
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: BackendTrafficPolicy
metadata:
  name: backend-tracing
spec:
  targetRefs:
    - group: gateway.networking.k8s.io
      kind: HTTPRoute
      name: backend-headers
  telemetry:
    tracing:
      samplingFraction:
        numerator: 100
        denominator: 100
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: backend-headers
spec:
  hostnames:
  parentRefs:
    - name: eg
  rules:
    - matches:
        - headers:
            - name: x-some-id
              type: Exact
              value: fake-val
      backendRefs:
        - name: infra-backend-v1
          port: 8080
