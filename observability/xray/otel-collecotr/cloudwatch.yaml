# inspired by https://raw.githubusercontent.com/aws-observability/cdk-aws-observability-accelerator/main/lib/common/resources/otel-collector-config.yml
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: x-ray
  namespace: observability
spec:
  mode: "daemonset"
  image: public.ecr.aws/aws-observability/aws-otel-collector:v0.37.0
  resources:
    limits:
      cpu: "1"
      memory: "2Gi"
    requests:
      cpu: "1"
      memory: "2Gi"
  serviceAccount: adot-collector
  podSecurityContext:
    runAsGroup: 0
    runAsUser: 0
  volumeMounts:
    - name: varlogpods
      mountPath: /var/log/pods
      readOnly: true
  volumes:
    - name: varlogpods
      hostPath:
        path: /var/log/pods
  env:
    - name: NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  config: |
    receivers:
      filelog:
        include: [ /var/log/pods/*/*/*.log ]
        include_file_name: false
        include_file_path: true
        start_at: end
        operators:
          # Find out which format is used by kubernetes
          - type: router
            id: get-format
            routes:
              - output: parser-docker
                expr: 'body matches "^\\{"'
              - output: parser-crio
                expr: 'body matches "^[^ Z]+ "'
              - output: parser-containerd
                expr: 'body matches "^[^ Z]+Z"'
          # Parse CRI-O format
          - type: regex_parser
            id: parser-crio
            regex:
              '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*)
              ?(?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout_type: gotime
              layout: '2006-01-02T15:04:05.999999999Z07:00'
          # Parse CRI-Containerd format
          - type: regex_parser
            id: parser-containerd
            regex:
              '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*)
              ?(?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          # Parse Docker format
          - type: json_parser
            id: parser-docker
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          - type: move
            from: attributes.log
            to: body
          # Extract metadata from file path
          - type: regex_parser
            id: extract_metadata_from_filepath
            regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
            parse_from: attributes["log.file.path"]
            cache:
              size: 128 # default maximum amount of Pods per Node is 110
          # Rename attributes
          - type: move
            from: attributes.stream
            to: attributes["log.iostream"]
          - type: move
            from: attributes.container_name
            to: resource["k8s.container.name"]
          - type: move
            from: attributes.namespace
            to: resource["k8s.namespace.name"]
          - type: move
            from: attributes.pod_name
            to: resource["k8s.pod.name"]
          - type: move
            from: attributes.restart_count
            to: resource["k8s.container.restart_count"]
          - type: move
            from: attributes.uid
            to: resource["k8s.pod.uid"]
      prometheus:
        config:
          scrape_interval: 15s
            scrape_timeout: 10s
            external_labels:
              cluster: "{{clusterName}}"            
          scrape_configs:
          - honor_labels: true
              job_name: kubernetes-istio
              kubernetes_sd_configs:
              - role: pod
              relabel_configs:
              - action: keep
                regex: true
                source_labels:
                - __meta_kubernetes_pod_annotation_prometheus_io_scrape
              - action: drop
                regex: true
                source_labels:
                - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
              - action: replace
                regex: (https?)
                source_labels:
                - __meta_kubernetes_pod_annotation_prometheus_io_scheme
                target_label: __scheme__
              - action: replace
                regex: (.+)
                source_labels:
                - __meta_kubernetes_pod_annotation_prometheus_io_path
                target_label: __metrics_path__
              - action: replace
                regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
                replacement: '[$$2]:$$1'
                source_labels:
                - __meta_kubernetes_pod_annotation_prometheus_io_port
                - __meta_kubernetes_pod_ip
                target_label: __address__
              - action: replace
                regex: (\d+);((([0-9]+?)(\.|$)){4})
                replacement: $$2:$$1
                source_labels:
                - __meta_kubernetes_pod_annotation_prometheus_io_port
                - __meta_kubernetes_pod_ip
                target_label: __address__
              - action: labelmap
                regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
                replacement: __param_$1
              - action: labelmap
                regex: __meta_kubernetes_pod_label_(.+)
              - action: replace
                source_labels:
                - __meta_kubernetes_namespace
                target_label: namespace
              - action: replace
                source_labels:
                - __meta_kubernetes_pod_name
                target_label: pod
              - action: keep
                source_labels: [ __address__ ]
                regex: '.*:15020$$'
              - action: drop
                regex: Pending|Succeeded|Failed|Completed
                source_labels:
                - __meta_kubernetes_pod_phase
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318

    extensions:
      sigv4auth:
        service: "aps" # It is mandatory that customers specify the service to be “aps”
        region: "us-west-2"

    exporters:
      logging:
        loglevel: debug
      prometheusremotewrite:
        endpoint: "https://aws-managed-prometheus-endpoint/v1/api/remote_write"
        add_metric_suffixes: false
        auth:
          authenticator: sigv4auth
      awscloudwatchlogs:
        log_group_name: "{{logGroupName}}"
        log_stream_name: "{{logStreamName}}"
        region: "{{awsRegion}}"
        log_retention: {{logRetentionDays}}
        raw_log: false
      awsxray:
        region: us-west-2

    processors:
      k8sattributes:
      batch:
      memory_limiter:
        limit_mib: 100
        check_interval: 5s

    service:
      telemetry:
        logs:
          level: "debug"
      pipelines:
        metrics:
          receivers:
            - prometheus
          exporters:
            - prometheusremotewrite
        logs:
          receivers: 
          - filelog
          processors: 
          - batch
          - k8sattributes
          exporters: 
          - awscloudwatchlogs
        traces:
          processors:
            - memory_limiter
            - batch
            - k8sattributes
          receivers:
            - otlp
          exporters:
            - awsxray
            - logging
