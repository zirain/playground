apiVersion: v1
items:
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"install.operator.istio.io/owning-resource":"unknown","install.operator.istio.io/owning-resource-namespace":"istio-system","istio.io/rev":"default","k8s-app":"istio-cni-node","operator.istio.io/component":"Cni","operator.istio.io/managed":"Reconcile","operator.istio.io/version":"0.0.0-ambient.191fe680b52c1754ee72a06b3e0d3f9d116f2e82","release":"istio"},"name":"istio-cni-node","namespace":"istio-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"istio-cni-node"}},"template":{"metadata":{"annotations":{"prometheus.io/path":"/metrics","prometheus.io/port":"15014","prometheus.io/scrape":"true","sidecar.istio.io/inject":"false"},"labels":{"k8s-app":"istio-cni-node","sidecar.istio.io/inject":"false"}},"spec":{"containers":[{"args":["--log_output_level=default:info"],"command":["install-cni"],"env":[{"name":"CNI_NETWORK_CONFIG","valueFrom":{"configMapKeyRef":{"key":"cni_network_config","name":"istio-cni-config"}}},{"name":"CNI_NET_DIR","value":"/etc/cni/net.d"},{"name":"CHAINED_CNI_PLUGIN","value":"true"},{"name":"REPAIR_ENABLED","value":"true"},{"name":"REPAIR_NODE_NAME","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"REPAIR_LABEL_PODS","value":"true"},{"name":"REPAIR_DELETE_PODS","value":"true"},{"name":"REPAIR_RUN_AS_DAEMON","value":"true"},{"name":"REPAIR_SIDECAR_ANNOTATION","value":"sidecar.istio.io/status"},{"name":"REPAIR_INIT_CONTAINER_NAME","value":"istio-validation"},{"name":"REPAIR_BROKEN_POD_LABEL_KEY","value":"cni.istio.io/uninitialized"},{"name":"REPAIR_BROKEN_POD_LABEL_VALUE","value":"true"},{"name":"NODE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"spec.nodeName"}}}],"image":"gcr.io/istio-testing/install-cni:0.0.0-ambient.191fe680b52c1754ee72a06b3e0d3f9d116f2e82","lifecycle":{"preStop":{"exec":{"command":["sh","-c","iptables -t nat -F ztunnel-PREROUTING\niptables -t nat -F ztunnel-POSTROUTING\niptables -t mangle -F ztunnel-PREROUTING\niptables -t mangle -F ztunnel-FOWARD\niptables -t mangle -F ztunnel-INPUT\niptables -t nat -D PREROUTING -j ztunnel-PREROUTING\niptables -t nat -X ztunnel-PREROUTING\niptables -t nat -D POSTROUTING -j ztunnel-POSTROUTING\niptables -t nat -X ztunnel-POSTROUTING\niptables -t mangle -D PREROUTING -j ztunnel-PREROUTING\niptables -t mangle -X ztunnel-PREROUTING\niptables -t mangle -D FORWARD -j ztunnel-FORWARD\niptables -t mangle -X ztunnel-FORWARD\niptables -t mangle -D INPUT -j ztunnel-INPUT\niptables -t mangle -X ztunnel-INPUT\n\nip route flush table 100\nip route flush table 101\nip route flush table 102\n\nip rule del priority 100\nip rule del priority 101\nip rule del priority 102\nip rule del priority 103\n\nip link del name istioin\nip link del name istioout\n\nipset destroy ztunnel-pods-ips"]}}},"name":"install-cni","readinessProbe":{"httpGet":{"path":"/readyz","port":8000}},"resources":{"requests":{"cpu":"100m","memory":"100Mi"}},"securityContext":{"capabilities":{"add":["NET_ADMIN"]},"privileged":true,"runAsGroup":0,"runAsNonRoot":false,"runAsUser":0},"volumeMounts":[{"mountPath":"/host/opt/cni/bin","name":"cni-bin-dir"},{"mountPath":"/host/etc/cni/net.d","name":"cni-net-dir"},{"mountPath":"/var/run/istio-cni","name":"cni-log-dir"},{"mountPath":"/etc/ambient-config","name":"cni-ambientconfig"}]}],"hostNetwork":true,"nodeSelector":{"kubernetes.io/os":"linux"},"priorityClassName":"system-node-critical","serviceAccountName":"istio-cni","terminationGracePeriodSeconds":5,"tolerations":[{"effect":"NoSchedule","operator":"Exists"},{"key":"CriticalAddonsOnly","operator":"Exists"},{"effect":"NoExecute","operator":"Exists"}],"volumes":[{"hostPath":{"path":"/opt/cni/bin"},"name":"cni-bin-dir"},{"hostPath":{"path":"/etc/ambient-config"},"name":"cni-ambientconfig"},{"hostPath":{"path":"/etc/cni/net.d"},"name":"cni-net-dir"},{"hostPath":{"path":"/var/run/istio-cni"},"name":"cni-log-dir"}]}},"updateStrategy":{"rollingUpdate":{"maxUnavailable":1},"type":"RollingUpdate"}}}
    creationTimestamp: "2022-09-13T03:18:49Z"
    generation: 1
    labels:
      install.operator.istio.io/owning-resource: unknown
      install.operator.istio.io/owning-resource-namespace: istio-system
      istio.io/rev: default
      k8s-app: istio-cni-node
      operator.istio.io/component: Cni
      operator.istio.io/managed: Reconcile
      operator.istio.io/version: 0.0.0-ambient.191fe680b52c1754ee72a06b3e0d3f9d116f2e82
      release: istio
    name: istio-cni-node
    namespace: istio-system
    resourceVersion: "1449"
    uid: 57b652c2-a7ac-4a8b-a0d2-04ec46c7d047
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: istio-cni-node
    template:
      metadata:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: "15014"
          prometheus.io/scrape: "true"
          sidecar.istio.io/inject: "false"
        creationTimestamp: null
        labels:
          k8s-app: istio-cni-node
          sidecar.istio.io/inject: "false"
      spec:
        containers:
        - args:
          - --log_output_level=default:info
          command:
          - install-cni
          env:
          - name: CNI_NETWORK_CONFIG
            valueFrom:
              configMapKeyRef:
                key: cni_network_config
                name: istio-cni-config
          - name: CNI_NET_DIR
            value: /etc/cni/net.d
          - name: CHAINED_CNI_PLUGIN
            value: "true"
          - name: REPAIR_ENABLED
            value: "true"
          - name: REPAIR_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: REPAIR_LABEL_PODS
            value: "true"
          - name: REPAIR_DELETE_PODS
            value: "true"
          - name: REPAIR_RUN_AS_DAEMON
            value: "true"
          - name: REPAIR_SIDECAR_ANNOTATION
            value: sidecar.istio.io/status
          - name: REPAIR_INIT_CONTAINER_NAME
            value: istio-validation
          - name: REPAIR_BROKEN_POD_LABEL_KEY
            value: cni.istio.io/uninitialized
          - name: REPAIR_BROKEN_POD_LABEL_VALUE
            value: "true"
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: gcr.io/istio-testing/install-cni:0.0.0-ambient.191fe680b52c1754ee72a06b3e0d3f9d116f2e82
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - sh
                - -c
                - |-
                  iptables -t nat -F ztunnel-PREROUTING
                  iptables -t nat -F ztunnel-POSTROUTING
                  iptables -t mangle -F ztunnel-PREROUTING
                  iptables -t mangle -F ztunnel-FOWARD
                  iptables -t mangle -F ztunnel-INPUT
                  iptables -t nat -D PREROUTING -j ztunnel-PREROUTING
                  iptables -t nat -X ztunnel-PREROUTING
                  iptables -t nat -D POSTROUTING -j ztunnel-POSTROUTING
                  iptables -t nat -X ztunnel-POSTROUTING
                  iptables -t mangle -D PREROUTING -j ztunnel-PREROUTING
                  iptables -t mangle -X ztunnel-PREROUTING
                  iptables -t mangle -D FORWARD -j ztunnel-FORWARD
                  iptables -t mangle -X ztunnel-FORWARD
                  iptables -t mangle -D INPUT -j ztunnel-INPUT
                  iptables -t mangle -X ztunnel-INPUT

                  ip route flush table 100
                  ip route flush table 101
                  ip route flush table 102

                  ip rule del priority 100
                  ip rule del priority 101
                  ip rule del priority 102
                  ip rule del priority 103

                  ip link del name istioin
                  ip link del name istioout

                  ipset destroy ztunnel-pods-ips
          name: install-cni
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 8000
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
            privileged: true
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
          - mountPath: /host/etc/cni/net.d
            name: cni-net-dir
          - mountPath: /var/run/istio-cni
            name: cni-log-dir
          - mountPath: /etc/ambient-config
            name: cni-ambientconfig
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: istio-cni
        serviceAccountName: istio-cni
        terminationGracePeriodSeconds: 5
        tolerations:
        - effect: NoSchedule
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
        volumes:
        - hostPath:
            path: /opt/cni/bin
            type: ""
          name: cni-bin-dir
        - hostPath:
            path: /etc/ambient-config
            type: ""
          name: cni-ambientconfig
        - hostPath:
            path: /etc/cni/net.d
            type: ""
          name: cni-net-dir
        - hostPath:
            path: /var/run/istio-cni
            type: ""
          name: cni-log-dir
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 2
    desiredNumberScheduled: 2
    numberAvailable: 2
    numberMisscheduled: 0
    numberReady: 2
    observedGeneration: 1
    updatedNumberScheduled: 2
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"install.operator.istio.io/owning-resource-namespace":"istio-system","istio.io/rev":"default","operator.istio.io/component":"Pilot","operator.istio.io/managed":"Reconcile","operator.istio.io/version":"0.0.0-ambient.191fe680b52c1754ee72a06b3e0d3f9d116f2e82"},"name":"ztunnel","namespace":"istio-system"},"spec":{"selector":{"matchLabels":{"app":"ztunnel"}},"template":{"metadata":{"annotations":{"sidecar.istio.io/inject":"false"},"labels":{"ambient-type":"ztunnel","app":"ztunnel","sidecar.istio.io/inject":"false"}},"spec":{"containers":[{"args":["proxy","sidecar"],"env":[{"name":"ISTIO_META_GENERATOR","value":"ztunnel-envoy"},{"name":"ISTIO_META_AMBIENT_TYPE","value":"ztunnel"},{"name":"ISTIO_META_CLUSTER_ID","value":"Kubernetes"},{"name":"CREDENTIAL_FETCHER_TYPE","value":"TokenRequest"},{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"ISTIO_META_NODE_NAME","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"INSTANCE_IP","valueFrom":{"fieldRef":{"fieldPath":"status.podIP"}}},{"name":"SERVICE_ACCOUNT","valueFrom":{"fieldRef":{"fieldPath":"spec.serviceAccountName"}}},{"name":"ISTIO_META_ENABLE_HBONE","value":"true"}],"image":"gcr.io/istio-testing/proxyv2:0.0.0-ambient.191fe680b52c1754ee72a06b3e0d3f9d116f2e82","name":"istio-proxy","readinessProbe":{"httpGet":{"path":"/healthz/ready","port":15020}},"securityContext":{"capabilities":{"add":["NET_ADMIN"]}},"volumeMounts":[{"mountPath":"/var/lib/istio/data","name":"istio-data"},{"mountPath":"/var/run/secrets/istio","name":"istiod-ca-cert"},{"mountPath":"/var/run/secrets/tokens","name":"istio-token"},{"mountPath":"/var/lib/kubelet/pki","name":"kubelet-creds"},{"mountPath":"/etc/istio/config","name":"config-volume"}]}],"initContainers":[{"command":["sh","-c","set -ex\n# START https://github.com/solo-io/istio-sidecarless/blob/master/redirect-worker.sh#L198-L205\nPROXY_OUTBOUND_MARK=0x401/0xfff\nPROXY_INBOUND_MARK=0x402/0xfff\nPROXY_ORG_SRC_MARK=0x4d2/0xfff\n# tproxy mark, it's only used here.\nMARK=0x400/0xfff\nORG_SRC_RET_MARK=0x4d3/0xfff\n# END https://github.com/solo-io/istio-sidecarless/blob/master/redirect-worker.sh#L198-L205\n\n# Below is from config.sh but used in redirect-worker.sh as well\nPOD_OUTBOUND=15001\nPOD_INBOUND=15008\nPOD_INBOUND_PLAINTEXT=15006\n\n# socket mark setup\nOUTBOUND_MASK=\"0x100\"\nOUTBOUND_MARK=\"0x100/$OUTBOUND_MASK\"\n\nSKIP_MASK=\"0x200\"\nSKIP_MARK=\"0x200/$SKIP_MASK\"\n\n# note!! this includes the skip mark bit, so match on skip mark will match this as well.\nCONNSKIP_MASK=\"0x220\"\nCONNSKIP_MARK=\"0x220/$CONNSKIP_MASK\"\n\n# note!! this includes the skip mark bit, so match on skip mark will match this as well.\nPROXY_MASK=\"0x210\"\nPROXY_MARK=\"0x210/$PROXY_MASK\"\n\nPROXY_RET_MASK=\"0x040\"\nPROXY_RET_MARK=\"0x040/$PROXY_RET_MASK\"\n\nINBOUND_TUN=istioin\nOUTBOUND_TUN=istioout\n\n# TODO: look into why link local (169.254.x.x) address didn't work\n# they don't respond to ARP.\nINBOUND_TUN_IP=192.168.126.1\nZTUNNEL_INBOUND_TUN_IP=192.168.126.2\nOUTBOUND_TUN_IP=192.168.127.1\nZTUNNEL_OUTBOUND_TUN_IP=192.168.127.2\nTUN_PREFIX=30\n\n# a route table number number we can use to send traffic to envoy (should be unused).\nINBOUND_ROUTE_TABLE=100\nINBOUND_ROUTE_TABLE2=103\nOUTBOUND_ROUTE_TABLE=101\n# needed for original src.\nPROXY_ROUTE_TABLE=102\n\n# START https://github.com/solo-io/istio-sidecarless/blob/master/redirect-worker.sh#L185-L196\nset +e # Only for delete, we don't care if this fails\nip link del p$INBOUND_TUN\nip link del p$OUTBOUND_TUN\nset -e\nHOST_IP=$(ip route | grep default | awk '{print $3}')\n\nip link add name p$INBOUND_TUN type geneve id 1000 remote $HOST_IP\nip addr add $ZTUNNEL_INBOUND_TUN_IP/$TUN_PREFIX dev p$INBOUND_TUN\n\nip link add name p$OUTBOUND_TUN type geneve id 1001 remote $HOST_IP\nip addr add $ZTUNNEL_OUTBOUND_TUN_IP/$TUN_PREFIX dev p$OUTBOUND_TUN\n\nip link set p$INBOUND_TUN up\nip link set p$OUTBOUND_TUN up\n\necho 0 \u003e /proc/sys/net/ipv4/conf/p$INBOUND_TUN/rp_filter\necho 0 \u003e /proc/sys/net/ipv4/conf/p$OUTBOUND_TUN/rp_filter\n# END https://github.com/solo-io/istio-sidecarless/blob/master/redirect-worker.sh#L185-L196\n\n# START https://github.com/solo-io/istio-sidecarless/blob/master/redirect-worker.sh#L206-L238\nset +e # Only for delete, we don't care if this fails\nip rule del priority 20000\nip rule del priority 20001\nip rule del priority 20002\nip rule del priority 20003\n\nip route flush table 100\nip route flush table 101\nip route flush table 102\nset -e\n\nip rule add priority 20000 fwmark $MARK lookup 100\nip rule add priority 20001 fwmark $PROXY_OUTBOUND_MARK lookup 101\nip rule add priority 20002 fwmark $PROXY_INBOUND_MARK lookup 102\nip rule add priority 20003 fwmark $ORG_SRC_RET_MARK lookup 100\nip route add local 0.0.0.0/0 dev lo table 100\n\nip route add table 101 $HOST_IP dev eth0 scope link\nip route add table 101 0.0.0.0/0 via $OUTBOUND_TUN_IP dev p$OUTBOUND_TUN\n\nip route add table 102 $HOST_IP dev eth0 scope link\nip route add table 102 0.0.0.0/0 via $INBOUND_TUN_IP dev p$INBOUND_TUN\n\nset +e\nnum_legacy_lines=$( (iptables-legacy-save || true; ip6tables-legacy-save || true) 2\u003e/dev/null | grep '^-' | wc -l)\nif [ \"${num_legacy_lines}\" -ge 10 ]; then\n  mode=legacy\nelse\n  num_nft_lines=$( (timeout 5 sh -c \"iptables-nft-save; ip6tables-nft-save\" || true) 2\u003e/dev/null | grep '^-' | wc -l)\n  if [ \"${num_legacy_lines}\" -ge \"${num_nft_lines}\" ]; then\n    mode=legacy\n  else\n    mode=nft\n  fi\nfi\nIPTABLES=iptables-legacy\nif [ \"${mode}\" = \"nft\" ]; then\n  IPTABLES=iptables-nft\nfi\nset -e\n\n$IPTABLES -t mangle -F PREROUTING\n$IPTABLES -t nat -F OUTPUT\n\n$IPTABLES-save | grep -v LOG | $IPTABLES-restore\n$IPTABLES -t mangle -I PREROUTING -j LOG --log-prefix \"mangle pre [$POD_NAME] \"\n$IPTABLES -t mangle -I POSTROUTING -j LOG --log-prefix \"mangle post [$POD_NAME] \"\n$IPTABLES -t mangle -I INPUT -j LOG --log-prefix \"mangle inp [$POD_NAME] \"\n$IPTABLES -t mangle -I OUTPUT -j LOG --log-prefix \"mangle out [$POD_NAME] \"\n$IPTABLES -t mangle -I FORWARD -j LOG --log-prefix \"mangle fw [$POD_NAME] \"\n$IPTABLES -t nat -I POSTROUTING -j LOG --log-prefix \"nat post [$POD_NAME] \"\n$IPTABLES -t nat -I INPUT -j LOG --log-prefix \"nat inp [$POD_NAME] \"\n$IPTABLES -t nat -I OUTPUT -j LOG --log-prefix \"nat out [$POD_NAME] \"\n$IPTABLES -t nat -I PREROUTING -j LOG --log-prefix \"nat pre [$POD_NAME] \"\n$IPTABLES -t raw -I PREROUTING -j LOG --log-prefix \"raw pre [$POD_NAME] \"\n$IPTABLES -t raw -I OUTPUT -j LOG --log-prefix \"raw out [$POD_NAME] \"\n$IPTABLES -t filter -I FORWARD -j LOG --log-prefix \"filt fw [$POD_NAME] \"\n$IPTABLES -t filter -I OUTPUT -j LOG --log-prefix \"filt out [$POD_NAME] \"\n$IPTABLES -t filter -I INPUT -j LOG --log-prefix \"filt inp [$POD_NAME] \"\n\n$IPTABLES -t mangle -A PREROUTING -p tcp -i p$INBOUND_TUN -m tcp --dport=$POD_INBOUND -j TPROXY --tproxy-mark $MARK --on-port $POD_INBOUND --on-ip 127.0.0.1\n$IPTABLES -t mangle -A PREROUTING -p tcp -i p$OUTBOUND_TUN -j TPROXY --tproxy-mark $MARK --on-port $POD_OUTBOUND --on-ip 127.0.0.1\n$IPTABLES -t mangle -A PREROUTING -p tcp -i p$INBOUND_TUN -j TPROXY --tproxy-mark $MARK --on-port $POD_INBOUND_PLAINTEXT --on-ip 127.0.0.1\n\n$IPTABLES -t mangle -A PREROUTING -p tcp -i eth0 ! --dst $INSTANCE_IP -j MARK --set-mark $ORG_SRC_RET_MARK\n\n$IPTABLES -t nat -A OUTPUT -p tcp --dport 15088 -j REDIRECT --to-port $POD_INBOUND\n# END https://github.com/solo-io/istio-sidecarless/blob/master/redirect-worker.sh#L206-L238\n# With normal linux routing we need to disable the rp_filter\n# as we get packets from a tunnel that doesn't have default routes.\necho 0 \u003e /proc/sys/net/ipv4/conf/all/rp_filter\necho 0 \u003e /proc/sys/net/ipv4/conf/default/rp_filter\necho 0 \u003e /proc/sys/net/ipv4/conf/eth0/rp_filter\n"],"env":[{"name":"INSTANCE_IP","valueFrom":{"fieldRef":{"fieldPath":"status.podIP"}}},{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"HOST_IP","valueFrom":{"fieldRef":{"fieldPath":"status.hostIP"}}},{"name":"ISTIO_META_ENABLE_HBONE","value":"true"}],"image":"gcr.io/istio-testing/proxyv2:0.0.0-ambient.191fe680b52c1754ee72a06b3e0d3f9d116f2e82","name":"istio-init","securityContext":{"capabilities":{"add":["NET_ADMIN"]},"privileged":true}}],"serviceAccountName":"ztunnel","tolerations":[{"effect":"NoSchedule","operator":"Exists"},{"key":"CriticalAddonsOnly","operator":"Exists"},{"effect":"NoExecute","operator":"Exists"}],"volumes":[{"emptyDir":{},"name":"istio-data"},{"hostPath":{"path":"/var/lib/kubelet/pki"},"name":"kubelet-creds"},{"name":"istio-token","projected":{"sources":[{"serviceAccountToken":{"audience":"istio-ca","expirationSeconds":43200,"path":"istio-token"}}]}},{"configMap":{"name":"istio-ca-root-cert"},"name":"istiod-ca-cert"},{"configMap":{"name":"istio","optional":true},"name":"config-volume"}]}}}}
    creationTimestamp: "2022-09-13T03:18:38Z"
    generation: 1
    labels:
      install.operator.istio.io/owning-resource-namespace: istio-system
      istio.io/rev: default
      operator.istio.io/component: Pilot
      operator.istio.io/managed: Reconcile
      operator.istio.io/version: 0.0.0-ambient.191fe680b52c1754ee72a06b3e0d3f9d116f2e82
    name: ztunnel
    namespace: istio-system
    resourceVersion: "1361"
    uid: 8a3e2196-dac8-4789-a6dd-dd12a3308760
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: ztunnel
    template:
      metadata:
        annotations:
          sidecar.istio.io/inject: "false"
        creationTimestamp: null
        labels:
          ambient-type: ztunnel
          app: ztunnel
          sidecar.istio.io/inject: "false"
      spec:
        containers:
        - args:
          - proxy
          - sidecar
          env:
          - name: ISTIO_META_GENERATOR
            value: ztunnel-envoy
          - name: ISTIO_META_AMBIENT_TYPE
            value: ztunnel
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: CREDENTIAL_FETCHER_TYPE
            value: TokenRequest
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: ISTIO_META_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.serviceAccountName
          - name: ISTIO_META_ENABLE_HBONE
            value: "true"
          image: gcr.io/istio-testing/proxyv2:0.0.0-ambient.191fe680b52c1754ee72a06b3e0d3f9d116f2e82
          imagePullPolicy: IfNotPresent
          name: istio-proxy
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz/ready
              port: 15020
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /var/lib/kubelet/pki
            name: kubelet-creds
          - mountPath: /etc/istio/config
            name: config-volume
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - sh
          - -c
          - |
            set -ex
            # START https://github.com/solo-io/istio-sidecarless/blob/master/redirect-worker.sh#L198-L205
            PROXY_OUTBOUND_MARK=0x401/0xfff
            PROXY_INBOUND_MARK=0x402/0xfff
            PROXY_ORG_SRC_MARK=0x4d2/0xfff
            # tproxy mark, it's only used here.
            MARK=0x400/0xfff
            ORG_SRC_RET_MARK=0x4d3/0xfff
            # END https://github.com/solo-io/istio-sidecarless/blob/master/redirect-worker.sh#L198-L205

            # Below is from config.sh but used in redirect-worker.sh as well
            POD_OUTBOUND=15001
            POD_INBOUND=15008
            POD_INBOUND_PLAINTEXT=15006

            # socket mark setup
            OUTBOUND_MASK="0x100"
            OUTBOUND_MARK="0x100/$OUTBOUND_MASK"

            SKIP_MASK="0x200"
            SKIP_MARK="0x200/$SKIP_MASK"

            # note!! this includes the skip mark bit, so match on skip mark will match this as well.
            CONNSKIP_MASK="0x220"
            CONNSKIP_MARK="0x220/$CONNSKIP_MASK"

            # note!! this includes the skip mark bit, so match on skip mark will match this as well.
            PROXY_MASK="0x210"
            PROXY_MARK="0x210/$PROXY_MASK"

            PROXY_RET_MASK="0x040"
            PROXY_RET_MARK="0x040/$PROXY_RET_MASK"

            INBOUND_TUN=istioin
            OUTBOUND_TUN=istioout

            # TODO: look into why link local (169.254.x.x) address didn't work
            # they don't respond to ARP.
            INBOUND_TUN_IP=192.168.126.1
            ZTUNNEL_INBOUND_TUN_IP=192.168.126.2
            OUTBOUND_TUN_IP=192.168.127.1
            ZTUNNEL_OUTBOUND_TUN_IP=192.168.127.2
            TUN_PREFIX=30

            # a route table number number we can use to send traffic to envoy (should be unused).
            INBOUND_ROUTE_TABLE=100
            INBOUND_ROUTE_TABLE2=103
            OUTBOUND_ROUTE_TABLE=101
            # needed for original src.
            PROXY_ROUTE_TABLE=102

            # START https://github.com/solo-io/istio-sidecarless/blob/master/redirect-worker.sh#L185-L196
            set +e # Only for delete, we don't care if this fails
            ip link del p$INBOUND_TUN
            ip link del p$OUTBOUND_TUN
            set -e
            HOST_IP=$(ip route | grep default | awk '{print $3}')

            ip link add name p$INBOUND_TUN type geneve id 1000 remote $HOST_IP
            ip addr add $ZTUNNEL_INBOUND_TUN_IP/$TUN_PREFIX dev p$INBOUND_TUN

            ip link add name p$OUTBOUND_TUN type geneve id 1001 remote $HOST_IP
            ip addr add $ZTUNNEL_OUTBOUND_TUN_IP/$TUN_PREFIX dev p$OUTBOUND_TUN

            ip link set p$INBOUND_TUN up
            ip link set p$OUTBOUND_TUN up

            echo 0 > /proc/sys/net/ipv4/conf/p$INBOUND_TUN/rp_filter
            echo 0 > /proc/sys/net/ipv4/conf/p$OUTBOUND_TUN/rp_filter
            # END https://github.com/solo-io/istio-sidecarless/blob/master/redirect-worker.sh#L185-L196

            # START https://github.com/solo-io/istio-sidecarless/blob/master/redirect-worker.sh#L206-L238
            set +e # Only for delete, we don't care if this fails
            ip rule del priority 20000
            ip rule del priority 20001
            ip rule del priority 20002
            ip rule del priority 20003

            ip route flush table 100
            ip route flush table 101
            ip route flush table 102
            set -e

            ip rule add priority 20000 fwmark $MARK lookup 100
            ip rule add priority 20001 fwmark $PROXY_OUTBOUND_MARK lookup 101
            ip rule add priority 20002 fwmark $PROXY_INBOUND_MARK lookup 102
            ip rule add priority 20003 fwmark $ORG_SRC_RET_MARK lookup 100
            ip route add local 0.0.0.0/0 dev lo table 100

            ip route add table 101 $HOST_IP dev eth0 scope link
            ip route add table 101 0.0.0.0/0 via $OUTBOUND_TUN_IP dev p$OUTBOUND_TUN

            ip route add table 102 $HOST_IP dev eth0 scope link
            ip route add table 102 0.0.0.0/0 via $INBOUND_TUN_IP dev p$INBOUND_TUN

            set +e
            num_legacy_lines=$( (iptables-legacy-save || true; ip6tables-legacy-save || true) 2>/dev/null | grep '^-' | wc -l)
            if [ "${num_legacy_lines}" -ge 10 ]; then
              mode=legacy
            else
              num_nft_lines=$( (timeout 5 sh -c "iptables-nft-save; ip6tables-nft-save" || true) 2>/dev/null | grep '^-' | wc -l)
              if [ "${num_legacy_lines}" -ge "${num_nft_lines}" ]; then
                mode=legacy
              else
                mode=nft
              fi
            fi
            IPTABLES=iptables-legacy
            if [ "${mode}" = "nft" ]; then
              IPTABLES=iptables-nft
            fi
            set -e

            $IPTABLES -t mangle -F PREROUTING
            $IPTABLES -t nat -F OUTPUT

            $IPTABLES-save | grep -v LOG | $IPTABLES-restore
            $IPTABLES -t mangle -I PREROUTING -j LOG --log-prefix "mangle pre [$POD_NAME] "
            $IPTABLES -t mangle -I POSTROUTING -j LOG --log-prefix "mangle post [$POD_NAME] "
            $IPTABLES -t mangle -I INPUT -j LOG --log-prefix "mangle inp [$POD_NAME] "
            $IPTABLES -t mangle -I OUTPUT -j LOG --log-prefix "mangle out [$POD_NAME] "
            $IPTABLES -t mangle -I FORWARD -j LOG --log-prefix "mangle fw [$POD_NAME] "
            $IPTABLES -t nat -I POSTROUTING -j LOG --log-prefix "nat post [$POD_NAME] "
            $IPTABLES -t nat -I INPUT -j LOG --log-prefix "nat inp [$POD_NAME] "
            $IPTABLES -t nat -I OUTPUT -j LOG --log-prefix "nat out [$POD_NAME] "
            $IPTABLES -t nat -I PREROUTING -j LOG --log-prefix "nat pre [$POD_NAME] "
            $IPTABLES -t raw -I PREROUTING -j LOG --log-prefix "raw pre [$POD_NAME] "
            $IPTABLES -t raw -I OUTPUT -j LOG --log-prefix "raw out [$POD_NAME] "
            $IPTABLES -t filter -I FORWARD -j LOG --log-prefix "filt fw [$POD_NAME] "
            $IPTABLES -t filter -I OUTPUT -j LOG --log-prefix "filt out [$POD_NAME] "
            $IPTABLES -t filter -I INPUT -j LOG --log-prefix "filt inp [$POD_NAME] "

            $IPTABLES -t mangle -A PREROUTING -p tcp -i p$INBOUND_TUN -m tcp --dport=$POD_INBOUND -j TPROXY --tproxy-mark $MARK --on-port $POD_INBOUND --on-ip 127.0.0.1
            $IPTABLES -t mangle -A PREROUTING -p tcp -i p$OUTBOUND_TUN -j TPROXY --tproxy-mark $MARK --on-port $POD_OUTBOUND --on-ip 127.0.0.1
            $IPTABLES -t mangle -A PREROUTING -p tcp -i p$INBOUND_TUN -j TPROXY --tproxy-mark $MARK --on-port $POD_INBOUND_PLAINTEXT --on-ip 127.0.0.1

            $IPTABLES -t mangle -A PREROUTING -p tcp -i eth0 ! --dst $INSTANCE_IP -j MARK --set-mark $ORG_SRC_RET_MARK

            $IPTABLES -t nat -A OUTPUT -p tcp --dport 15088 -j REDIRECT --to-port $POD_INBOUND
            # END https://github.com/solo-io/istio-sidecarless/blob/master/redirect-worker.sh#L206-L238
            # With normal linux routing we need to disable the rp_filter
            # as we get packets from a tunnel that doesn't have default routes.
            echo 0 > /proc/sys/net/ipv4/conf/all/rp_filter
            echo 0 > /proc/sys/net/ipv4/conf/default/rp_filter
            echo 0 > /proc/sys/net/ipv4/conf/eth0/rp_filter
          env:
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: HOST_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: ISTIO_META_ENABLE_HBONE
            value: "true"
          image: gcr.io/istio-testing/proxyv2:0.0.0-ambient.191fe680b52c1754ee72a06b3e0d3f9d116f2e82
          imagePullPolicy: IfNotPresent
          name: istio-init
          resources: {}
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ztunnel
        serviceAccountName: ztunnel
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
        volumes:
        - emptyDir: {}
          name: istio-data
        - hostPath:
            path: /var/lib/kubelet/pki
            type: ""
          name: kubelet-creds
        - name: istio-token
          projected:
            defaultMode: 420
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            defaultMode: 420
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: istio
            optional: true
          name: config-volume
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 2
    desiredNumberScheduled: 2
    numberAvailable: 2
    numberMisscheduled: 0
    numberReady: 2
    observedGeneration: 1
    updatedNumberScheduled: 2
kind: List
metadata:
  resourceVersion: ""
